{"version":3,"sources":["components/Rules.js","components/Colour.js","components/ColourList.js","components/HintCircle.js","components/Hint.js","components/Row.js","components/Board.js","components/Modal.js","components/BackDrop.js","components/Mastermind.js","App.js","index.js"],"names":["Rules","state","toggleRules","toggleHandler","setState","this","onClick","Component","Colour","props","onchoose","colour","id","style","height","width","borderRadius","border","backgroundColor","ColourList","colours","display","justifyContent","map","index","chooseHandler","key","HintCircle","1","2","3","value","Hint","hint","componentDidMount","console","log","hintValues","coloursInAnswer","red","pos","yellow","blue","brown","green","purple","i","j","Object","keys","answer","push","filteredValues","filter","element","readColours","forEach","clr","x","k","length","includes","sort","a","b","winningCondition","JSON","stringify","hasWonHandler","rowId","el","Row","colors","isfull","changeColour","isActive","currentColour","toString","count","activeHandler","displayHint","Board","active","nextId","Modal","className","children","BackDrop","onclick","Mastermind","gameOver","ans","Math","floor","random","onChooseHandler","displayModal","resetHandler","textAlign","App","st","newkey","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb810556.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Rules extends Component {\r\n   state = { toggleRules: false };\r\n\r\n   toggleHandler = () => {\r\n      this.setState({ toggleRules: !this.state.toggleRules });\r\n   };\r\n\r\n   render() {\r\n      return !this.state.toggleRules ? (\r\n         <button onClick={this.toggleHandler}>Show Rules</button>\r\n      ) : (\r\n         <div>\r\n            {\" \"}\r\n            <button onClick={this.toggleHandler}> Hide Rules</button>\r\n            <p>\r\n               The codebreaker tries to guess the pattern, in both order and\r\n               color, within eight to twelve turns. Each guess is made by\r\n               placing a row of code pegs on the decoding board. Once placed,\r\n               the codemaker provides feedback by placing from zero to four key\r\n               pegs in the small holes of the row with the guess. A colored or\r\n               black key peg is placed for each code peg from the guess which is\r\n               correct in both color and position. A white key peg indicates the\r\n               existence of a correct color code peg placed in the wrong\r\n               position.\r\n            </p>\r\n            <p>\r\n               If there are duplicate colours in the guess, they cannot all be\r\n               awarded a key peg unless they correspond to the same number of\r\n               duplicate colours in the hidden code. For example, if the hidden\r\n               code is white-white-black-black and the player guesses\r\n               white-white-white-black, the codemaker will award two colored key\r\n               pegs for the two correct whites, nothing for the third white as\r\n               there is not a third white in the code, and a colored key peg for\r\n               the black. No indication is given of the fact that the code also\r\n               includes a second black.\r\n            </p>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Rules;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Colour extends Component {\r\n   // red yellow blue brown green purple\r\n   render() {\r\n      return (\r\n         <div\r\n            onClick={() =>\r\n               this.props.onchoose(this.props.colour, this.props.id)\r\n            }\r\n            style={{\r\n               height: \"40px\",\r\n               width: \"40px\",\r\n               borderRadius: \"30px\",\r\n               border: \"2px black dotted\",\r\n               backgroundColor: `${this.props.colour}`\r\n            }}></div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Colour;\r\n","import React, { Component } from \"react\";\r\nimport Colour from \"./Colour\";\r\n\r\nexport class ColourList extends Component {\r\n   // red yellow blue brown green purple\r\n\r\n   colours = [\"red\", \"yellow\", \"blue\", \"brown\", \"green\", \"purple\"];\r\n   render() {\r\n      return (\r\n         <div\r\n            style={{\r\n               display: \"flex\",\r\n               justifyContent: \"space-between\",\r\n               width: \"500px\"\r\n            }}>\r\n            <h3>Choose the colors</h3>\r\n            {this.colours.map((colour, index) => {\r\n               return (\r\n                  <Colour\r\n                     onchoose={this.props.chooseHandler}\r\n                     key={index}\r\n                     colour={colour}\r\n                  />\r\n               );\r\n            })}\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default ColourList;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class HintCircle extends Component {\r\n   colours = { 1: \"red\", 2: \"white\", 3: \"black\" };\r\n\r\n   render() {\r\n      return (\r\n         <div\r\n            style={{\r\n               height: \"10px\",\r\n               width: \"10px\",\r\n               borderRadius: \"30px\",\r\n               border: \"2px black solid\",\r\n               backgroundColor: `${this.colours[this.props.value]}`\r\n            }}></div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default HintCircle;\r\n","import React, { Component } from \"react\";\r\nimport HintCircle from \"./HintCircle\";\r\n\r\nexport class Hint extends Component {\r\n   state = {\r\n      hint: [1, 1, 1, 1]\r\n   };\r\n\r\n   componentDidMount = () => {\r\n      console.log(\"hello world from the hint logic fuction\");\r\n      //[\"red\", \"yellow\", \"blue\", \"brown\", \"green\", \"purple\"];\r\n      //if value 1 ==== wrong\r\n      //if value 2 ==== wrong but right colour\r\n      //if value 3 ==== right\r\n\r\n      let hintValues = [1, 1, 1, 1];\r\n      let coloursInAnswer = [\r\n         { red: 0, pos: [] },\r\n         { yellow: 0, pos: [] },\r\n         { blue: 0, pos: [] },\r\n         { brown: 0, pos: [] },\r\n         { green: 0, pos: [] },\r\n         { purple: 0, pos: [] }\r\n      ];\r\n\r\n      //eg coloursInAnswer = [{\"red : 1\"}, {\"purple: 2\"}, {\"blue: 1\"}]\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n         for (let j = 0; j < 6; j++) {\r\n            if (Object.keys(coloursInAnswer[j])[0] === this.props.answer[i]) {\r\n               coloursInAnswer[j][Object.keys(coloursInAnswer[j])[0]] += 1;\r\n               coloursInAnswer[j][Object.keys(coloursInAnswer[j])[1]].push(i);\r\n            }\r\n         }\r\n      }\r\n      const filteredValues = coloursInAnswer.filter(\r\n         element => element[Object.keys(element)[0]] !== 0\r\n      );\r\n      let readColours = [];\r\n      filteredValues.forEach((clr, index) => {\r\n         let x = {};\r\n         x[Object.keys(clr)[0]] = 0;\r\n         console.log(\"x : \", x);\r\n         readColours.push(x);\r\n      });\r\n      console.log(\"read colors : \", readColours);\r\n\r\n      //this.props.colours is [\"red\", \"blue\",\"brown\", \"red\"]\r\n\r\n      //now coloursInAnswer contains key-value pairs of the repeated colors\r\n      // i is for this.props.colours\r\n      // j is for filteredValues\r\n      // k is for hintValues\r\n      let k = 0;\r\n      console.log(filteredValues);\r\n      for (let i = 0; i < 4; i++) {\r\n         for (let j = 0; j < filteredValues.length; j++) {\r\n            if (\r\n               readColours[j][Object.keys(filteredValues[j])[0]] <\r\n                  filteredValues[j][Object.keys(filteredValues[j])[1]].length &&\r\n               this.props.colours[i][\"colour\"] ===\r\n                  Object.keys(filteredValues[j])[0] &&\r\n               filteredValues[j][Object.keys(filteredValues[j])[1]].includes(\r\n                  i\r\n               ) === false\r\n            ) {\r\n               console.log(\"correct colour but wrong position\");\r\n               hintValues[k] = 2;\r\n               readColours[j][Object.keys(filteredValues[j])[0]] += 1;\r\n               k++;\r\n            }\r\n            if (\r\n               readColours[j][Object.keys(filteredValues[j])[0]] <=\r\n                  filteredValues[j][Object.keys(filteredValues[j])[1]].length &&\r\n               this.props.colours[i][\"colour\"] ===\r\n                  Object.keys(filteredValues[j])[0] &&\r\n               filteredValues[j][Object.keys(filteredValues[j])[1]].includes(i)\r\n            ) {\r\n               console.log(\"correct position and colour\");\r\n               hintValues[k] = 3;\r\n               readColours[j][Object.keys(filteredValues[j])[0]] += 1;\r\n               k++;\r\n            }\r\n         }\r\n      }\r\n\r\n      console.log(\"hint before sort : \", hintValues);\r\n\r\n      //sorting to descending order\r\n      hintValues.sort((a, b) => b - a);\r\n      const winningCondition = [3, 3, 3, 3];\r\n      console.log(\"hint after sort : \", hintValues);\r\n      this.setState({ hint: hintValues }, () => {\r\n         console.log(\"inside callback : \", this.state.hint);\r\n         if (\r\n            JSON.stringify(winningCondition) === JSON.stringify(this.state.hint)\r\n         )\r\n            this.props.hasWonHandler();\r\n         else if (this.props.rowId === 9) {\r\n            this.props.hasWonHandler();\r\n         }\r\n      });\r\n\r\n      //   for (let i = 0; i < 4; i++) {\r\n      //      let y = {};\r\n      //      let x = this.props.answer[i];\r\n      //      y[this.props.answer[i]] = 0;\r\n      //      if (coloursInAnswer.indexOf()) {\r\n      //         y[this.props.answer[i]] = 1;\r\n      //         console.log(\"im running away\");\r\n      //         coloursInAnswer.push(y);\r\n      //      } else {\r\n      //         const ind = coloursInAnswer.indexOf([this.props.answer[i]]);\r\n      //         console.log(\"ind\", ind);\r\n      //         coloursInAnswer[ind][this.props.answer[i]] += 1;\r\n      //         j++;\r\n      //      }\r\n      //   }\r\n      //   console.log(\"colours in answers : \", coloursInAnswer);\r\n\r\n      // ==============================================\r\n      //       console.log(coloursInAnswer);\r\n\r\n      //       for (let i = 0; i < 4; i++) {\r\n      //          if (coloursInAnswer.includes(this.props.colours[i])) {\r\n      //             hintValues[i] = 2;\r\n      //          }\r\n      //       }\r\n      //       console.log(\"hint values : \", hintValues);\r\n\r\n      //       for (let i = 0; i < 4; i++) {\r\n      //          if (this.props.answer[i] === this.props.colours[i].colour) {\r\n      //             hintValues[i] = 3;\r\n      //          }\r\n      //       }\r\n      //       this.setState({ hint: hintValues });\r\n   };\r\n   render() {\r\n      return (\r\n         <div>\r\n            {this.state.hint.map((el, index) => {\r\n               return <HintCircle value={el} key={index} id={index} />;\r\n            })}\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Hint;\r\n","import React, { Component } from \"react\";\r\nimport Colour from \"./Colour\";\r\nimport Hint from \"./Hint\";\r\n\r\nexport class Row extends Component {\r\n   state = {\r\n      colors: [\r\n         { id: 0, colour: \"\" },\r\n         { id: 1, colour: \"\" },\r\n         { id: 2, colour: \"\" },\r\n         { id: 3, colour: \"\" }\r\n      ],\r\n      isfull: false\r\n   };\r\n   // state = {colors : [ {0: \"blue\"}, {1: \"red\"} ]}\r\n   changeColour = (clr, id) => {\r\n      if (!this.state.isfull && this.props.isActive === true) {\r\n         console.log(\"current colour : \", this.props.currentColour.toString());\r\n         let x = this.state.colors.map(el => {\r\n            if (el.id === id) {\r\n               return { ...el, colour: this.props.currentColour.toString() };\r\n            }\r\n            return el;\r\n         });\r\n         this.setState({ colors: x }, () => {\r\n            let count = 0;\r\n            console.log(\"state updated\");\r\n            for (let i = 0; i < 4; i++) {\r\n               if (this.state.colors[i].colour !== \"\") {\r\n                  count++;\r\n               }\r\n            }\r\n            if (count === 4) {\r\n               console.log(\"disabled / full\");\r\n               this.setState({ isfull: true });\r\n               this.props.activeHandler(this.props.rowId);\r\n            }\r\n         });\r\n      }\r\n   };\r\n\r\n   displayHint = () => {\r\n      if (this.state.isfull) {\r\n         return (\r\n            <Hint\r\n               rowId={this.props.rowId}\r\n               hasWonHandler={this.props.hasWonHandler}\r\n               answer={this.props.answer}\r\n               colours={this.state.colors}\r\n            />\r\n         );\r\n      }\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div style={{ display: \"flex\" }}>\r\n            <div\r\n               style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  width: \"200px\"\r\n               }}>\r\n               {[1, 2, 3, 4].map((el, index) => {\r\n                  return (\r\n                     <Colour\r\n                        onchoose={this.changeColour}\r\n                        key={index}\r\n                        id={index}\r\n                        colour={this.state.colors[index].colour}\r\n                     />\r\n                  );\r\n               })}\r\n            </div>\r\n            <div>{this.displayHint()}</div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Row;\r\n","import React, { Component } from \"react\";\r\nimport Row from \"./Row\";\r\n\r\nexport class Board extends Component {\r\n   state = {\r\n      active: [\r\n         { id: 0, active: true },\r\n         { id: 1, active: false },\r\n         { id: 2, active: false },\r\n         { id: 3, active: false },\r\n         { id: 4, active: false },\r\n         { id: 5, active: false },\r\n         { id: 6, active: false },\r\n         { id: 7, active: false },\r\n         { id: 8, active: false },\r\n         { id: 9, active: false }\r\n      ]\r\n   };\r\n\r\n   activeHandler = id => {\r\n      let nextId = id + 1;\r\n      console.log(\"id : \", id);\r\n      console.log(\"nextId : \", nextId);\r\n      const x = this.state.active.map(el => {\r\n         if (id === el.id) {\r\n            return { ...el, active: false };\r\n         }\r\n         if (nextId === el.id) {\r\n            return { ...el, active: true };\r\n         }\r\n         return el;\r\n      });\r\n      this.setState({ active: x });\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((el, index) => {\r\n               return (\r\n                  <Row\r\n                     hasWonHandler={this.props.hasWonHandler}\r\n                     answer={this.props.answer}\r\n                     activeHandler={this.activeHandler}\r\n                     key={index}\r\n                     rowId={index}\r\n                     isActive={this.state.active[index].active}\r\n                     currentColour={this.props.currentColour}\r\n                  />\r\n               );\r\n            })}\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Modal.css\";\r\n\r\nexport class Modal extends Component {\r\n   render() {\r\n      return <div className='Modal'>{this.props.children}</div>;\r\n   }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/BackDrop.css\";\r\nexport class BackDrop extends Component {\r\n   render() {\r\n      return <div onClick={this.props.onclick} className='BackDrop'></div>;\r\n   }\r\n}\r\n\r\nexport default BackDrop;\r\n","import React, { Component } from \"react\";\r\nimport Rules from \"./Rules\";\r\nimport ColourList from \"./ColourList\";\r\nimport Board from \"./Board\";\r\nimport Modal from \"./Modal\";\r\nimport BackDrop from \"./BackDrop\";\r\n\r\nclass Mastermind extends Component {\r\n   state = { currentColour: \"\", answer: [], gameOver: false };\r\n   //answer = [\"red\", black, etc]\r\n   colours = [\"red\", \"yellow\", \"blue\", \"brown\", \"green\", \"purple\"];\r\n   componentDidMount = () => {\r\n      let ans = [];\r\n      for (let i = 0; i < 4; i++) {\r\n         let value = Math.floor(Math.random() * 6);\r\n         ans.push(this.colours[value]);\r\n      }\r\n      this.setState({ answer: ans });\r\n   };\r\n\r\n   hasWonHandler = () => {\r\n      console.log(\"i ran\");\r\n      this.setState({ gameOver: true });\r\n   };\r\n\r\n   onChooseHandler = colour => {\r\n      console.log(colour);\r\n      this.setState({\r\n         currentColour: colour\r\n      });\r\n   };\r\n\r\n   displayModal = () => {\r\n      if (this.state.gameOver === true) {\r\n         return (\r\n            <div>\r\n               <Modal>GAME OVER</Modal>\r\n               <BackDrop onclick={this.props.resetHandler} />\r\n            </div>\r\n         );\r\n      }\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1 style={{ textAlign: \"center\" }}>MASTERMIND</h1>\r\n            <Rules />\r\n            <ColourList chooseHandler={this.onChooseHandler} />\r\n            <Board\r\n               hasWonHandler={this.hasWonHandler}\r\n               answer={this.state.answer}\r\n               currentColour={this.state.currentColour}\r\n            />\r\n            {this.displayModal()}\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Mastermind;\r\n","import React, { Component } from \"react\";\nimport Mastermind from \"./components/Mastermind\";\nimport \"./App.css\";\n\nclass App extends Component {\n   state = { key: 0 };\n\n   resetHandler = () => {\n      console.log(\"i was triggered\");\n      this.setState(st => {\n         let newkey = st.key;\n         newkey++;\n         return { key: newkey };\n      });\n   };\n\n   render() {\n      return (\n         <Mastermind key={this.state.key} resetHandler={this.resetHandler} />\n      );\n   }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n"],"sourceRoot":""}